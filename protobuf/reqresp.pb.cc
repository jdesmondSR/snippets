// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reqresp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "reqresp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace reqresp {

namespace {

const ::google::protobuf::Descriptor* CreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_reqresp_2eproto() {
  protobuf_AddDesc_reqresp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "reqresp.proto");
  GOOGLE_CHECK(file != NULL);
  CreateReq_descriptor_ = file->message_type(0);
  static const int CreateReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateReq, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateReq, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateReq, opsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateReq, volume_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateReq, chunk_size_),
  };
  CreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateReq_descriptor_,
      CreateReq::default_instance_,
      CreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_reqresp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateReq_descriptor_, &CreateReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_reqresp_2eproto() {
  delete CreateReq::default_instance_;
  delete CreateReq_reflection_;
}

void protobuf_AddDesc_reqresp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rreqresp.proto\022\007reqresp\"[\n\tCreateReq\022\r\n"
    "\005magic\030\001 \002(\r\022\n\n\002op\030\002 \002(\r\022\014\n\004opsn\030\003 \002(\r\022\021"
    "\n\tvolume_id\030\004 \002(\r\022\022\n\nchunk_size\030\005 \002(\r", 117);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "reqresp.proto", &protobuf_RegisterTypes);
  CreateReq::default_instance_ = new CreateReq();
  CreateReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_reqresp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_reqresp_2eproto {
  StaticDescriptorInitializer_reqresp_2eproto() {
    protobuf_AddDesc_reqresp_2eproto();
  }
} static_descriptor_initializer_reqresp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CreateReq::kMagicFieldNumber;
const int CreateReq::kOpFieldNumber;
const int CreateReq::kOpsnFieldNumber;
const int CreateReq::kVolumeIdFieldNumber;
const int CreateReq::kChunkSizeFieldNumber;
#endif  // !_MSC_VER

CreateReq::CreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:reqresp.CreateReq)
}

void CreateReq::InitAsDefaultInstance() {
}

CreateReq::CreateReq(const CreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:reqresp.CreateReq)
}

void CreateReq::SharedCtor() {
  _cached_size_ = 0;
  magic_ = 0u;
  op_ = 0u;
  opsn_ = 0u;
  volume_id_ = 0u;
  chunk_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateReq::~CreateReq() {
  // @@protoc_insertion_point(destructor:reqresp.CreateReq)
  SharedDtor();
}

void CreateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateReq_descriptor_;
}

const CreateReq& CreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reqresp_2eproto();
  return *default_instance_;
}

CreateReq* CreateReq::default_instance_ = NULL;

CreateReq* CreateReq::New() const {
  return new CreateReq;
}

void CreateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(magic_, chunk_size_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:reqresp.CreateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 magic = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_op;
        break;
      }

      // required uint32 op = 2;
      case 2: {
        if (tag == 16) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opsn;
        break;
      }

      // required uint32 opsn = 3;
      case 3: {
        if (tag == 24) {
         parse_opsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opsn_)));
          set_has_opsn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_volume_id;
        break;
      }

      // required uint32 volume_id = 4;
      case 4: {
        if (tag == 32) {
         parse_volume_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_id_)));
          set_has_volume_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_chunk_size;
        break;
      }

      // required uint32 chunk_size = 5;
      case 5: {
        if (tag == 40) {
         parse_chunk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunk_size_)));
          set_has_chunk_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:reqresp.CreateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:reqresp.CreateReq)
  return false;
#undef DO_
}

void CreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:reqresp.CreateReq)
  // required uint32 magic = 1;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->magic(), output);
  }

  // required uint32 op = 2;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->op(), output);
  }

  // required uint32 opsn = 3;
  if (has_opsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opsn(), output);
  }

  // required uint32 volume_id = 4;
  if (has_volume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->volume_id(), output);
  }

  // required uint32 chunk_size = 5;
  if (has_chunk_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->chunk_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:reqresp.CreateReq)
}

::google::protobuf::uint8* CreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:reqresp.CreateReq)
  // required uint32 magic = 1;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->magic(), target);
  }

  // required uint32 op = 2;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->op(), target);
  }

  // required uint32 opsn = 3;
  if (has_opsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opsn(), target);
  }

  // required uint32 volume_id = 4;
  if (has_volume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->volume_id(), target);
  }

  // required uint32 chunk_size = 5;
  if (has_chunk_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->chunk_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reqresp.CreateReq)
  return target;
}

int CreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 magic = 1;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic());
    }

    // required uint32 op = 2;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op());
    }

    // required uint32 opsn = 3;
    if (has_opsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opsn());
    }

    // required uint32 volume_id = 4;
    if (has_volume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volume_id());
    }

    // required uint32 chunk_size = 5;
    if (has_chunk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chunk_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateReq::MergeFrom(const CreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_opsn()) {
      set_opsn(from.opsn());
    }
    if (from.has_volume_id()) {
      set_volume_id(from.volume_id());
    }
    if (from.has_chunk_size()) {
      set_chunk_size(from.chunk_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateReq::CopyFrom(const CreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CreateReq::Swap(CreateReq* other) {
  if (other != this) {
    std::swap(magic_, other->magic_);
    std::swap(op_, other->op_);
    std::swap(opsn_, other->opsn_);
    std::swap(volume_id_, other->volume_id_);
    std::swap(chunk_size_, other->chunk_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateReq_descriptor_;
  metadata.reflection = CreateReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace reqresp

// @@protoc_insertion_point(global_scope)
